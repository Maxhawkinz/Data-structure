import java.util.Scanner;
import java.util.Stack;
import java.util.InputMismatchException;

public class UndoRedoDemo {

    static StringBuilder document = new StringBuilder();
    static Stack<String> undoStack = new Stack<>();
    static Stack<String> redoStack = new Stack<>();

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while (true) {
            printStatus();

            System.out.println("Choose an option:");
            System.out.println("1. Append text");
            System.out.println("2. Undo");
            System.out.println("3. Redo");
            System.out.println("4. Delete last n characters");
            System.out.println("5. Exit");
            System.out.print("Enter choice: ");

            int choice = getValidatedIntInput(sc);

            switch (choice) {
                case 1:
                    handleAppend(sc);
                    break;
                case 2:
                    undo();
                    break;
                case 3:
                    redo();
                    break;
                case 4:
                    handleDelete(sc);
                    break;
                case 5:
                    System.out.println("Exiting...");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    static void handleAppend(Scanner sc) {
        System.out.print("Enter text to append: ");
        String text = sc.nextLine();
        if (text.trim().isEmpty()) {
            System.out.println("Cannot append empty text.");
            return;
        }
        makeChange(text, true);
    }

    static void handleDelete(Scanner sc) {
        System.out.print("Enter number of characters to delete: ");
        int n = getValidatedIntInput(sc);
        if (n <= 0) {
            System.out.println("Please enter a positive number.");
        } else if (n > document.length()) {
            System.out.println("Cannot delete more characters than the document has.");
        } else {
            makeChange(String.valueOf(n), false);
        }
    }

    static void makeChange(String input, boolean isAppend) {
        if (isAppend) {
            undoStack.push(document.toString());
            redoStack.clear();
            document.append(input);
        } else {
            int n = Integer.parseInt(input);
            undoStack.push(document.toString());
            redoStack.clear();
            document.delete(document.length() - n, document.length());
        }
    }

    static void undo() {
        if (!undoStack.isEmpty()) {
            redoStack.push(document.toString());
            document = new StringBuilder(undoStack.pop());
            System.out.println("Undo successful.");
        } else {
            System.out.println("Nothing to undo!");
        }
    }

    static void redo() {
        if (!redoStack.isEmpty()) {
            undoStack.push(document.toString());
            document = new StringBuilder(redoStack.pop());
            System.out.println("Redo successful.");
        } else {
            System.out.println("Nothing to redo!");
        }
    }

    static void printStatus() {
        System.out.println("\n-----------------------------");
        System.out.println("Current Document: \"" + document.toString() + "\"");
        System.out.println("[Undo Stack Size: " + undoStack.size() + ", Redo Stack Size: " + redoStack.size() + "]");
        System.out.println("-----------------------------");
    }

    static int getValidatedIntInput(Scanner sc) {
        while (true) {
            try {
                int value = sc.nextInt();
                sc.nextLine(); // clear newline
                return value;
            } catch (InputMismatchException e) {
                System.out.print("Invalid input. Please enter a number: ");
                sc.nextLine(); // clear invalid input
            }
        }
    }
}
