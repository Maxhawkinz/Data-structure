import java.util.Scanner;

public class HashTable2 {
    private int size;
    private Node[] table;

    static class Node {
        int key;
        Node next;

        Node(int key) {
            this.key = key;
            this.next = null;
        }
    }

    public HashTable2(int size) {
        this.size = size;
        table = new Node[size];
    }

    private int hash(int key) {
        return key % size;
    }

    public void insert(int key) {
        int index = hash(key);
        Node head = table[index];

        Node current = head;
        while (current != null) {
            if (current.key == key) {
                System.out.println("Key " + key + " already exists at index " + index);
                return;
            }
            current = current.next;
        }

        Node newNode = new Node(key);
        newNode.next = head;
        table[index] = newNode;
        System.out.println("Inserted " + key + " at index " + index);
    }

    public boolean search(int key) {
        int index = hash(key);
        Node current = table[index];
        while (current != null) {
            if (current.key == key) {
                System.out.println("Key " + key + " found at index " + index);
                return true;
            }
            current = current.next;
        }
        System.out.println("Key " + key + " not found.");
        return false;
    }

    public void display() {
        System.out.println("Hash Table Contents:");
        for (int i = 0; i < size; i++) {
            System.out.print("Bucket " + i + ": ");
            Node current = table[i];
            while (current != null) {
                System.out.print(current.key + " -> ");
                current = current.next;
            }
            System.out.println("null");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int tableSize = 0;
        while (true) {
            System.out.print("Enter the size of the hash table (positive integer): ");
            String input = scanner.nextLine().trim();
            try {
                tableSize = Integer.parseInt(input);
                if (tableSize > 0) {
                    break;
                } else {
                    System.out.println("Size must be a positive integer.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a positive integer.");
            }
        }

        HashTable2 ht = new HashTable2(tableSize);

        while (true) {
            System.out.println("\nChoose operation:");
            System.out.println("1 - Insert Key");
            System.out.println("2 - Search Key");
            System.out.println("3 - Display Hash Table");
            System.out.println("4 - Exit");
            System.out.print("Enter your choice: ");

            String choice = scanner.nextLine().trim();

            if (choice.equals("1")) {
                System.out.print("Enter key to insert: ");
                try {
                    int key = Integer.parseInt(scanner.nextLine().trim());
                    ht.insert(key);
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter an integer.");
                }
            } else if (choice.equals("2")) {
                System.out.print("Enter key to search: ");
                try {
                    int key = Integer.parseInt(scanner.nextLine().trim());
                    ht.search(key);
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter an integer.");
                }
            } else if (choice.equals("3")) {
                ht.display();
            } else if (choice.equals("4")) {
                System.out.println("Exiting program.");
                break;
            } else {
                System.out.println("Invalid choice. Try again.");
            }
        }

        scanner.close();
    }
}
